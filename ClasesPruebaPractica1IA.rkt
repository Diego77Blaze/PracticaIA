#lang racket
(require "Practica1IA.rkt" rackunit)
(define sudoku                  
  '((5 0 0 0 0 0 0 0 0)
    (0 2 8 4 0 0 5 0 3)
    (1 0 0 2 7 0 0 0 6)
    (0 0 3 0 5 2 1 9 0)
    (7 0 6 0 1 0 2 0 8)
    (0 1 9 7 4 0 3 0 0)
    (6 0 0 0 9 4 0 0 2)
    (8 0 1 0 0 6 7 5 0)
    (0 0 0 0 0 0 0 0 4))
  )
(check-eq? (numberInListH 9 (car sudoku)) #f "Comprueba si un valor esta en una fila.")
(check-eq? (numberInListV sudoku 7 4) #t "Comprueba si un valor esta en una columna.")
(check-eq? (numberInListC 1 sudoku 5 5)#t "Comprueba si un valor esta en un cuandrante.")
(check listaConstruir3PrimerasFilas  sudoku 0 "Forma las 3 primeras filas del sudoku.")
(check listaConstruir3FilasDelMedio sudoku 3 "Forma las 3 filas centrales del sudoku.")
(check listaConstruir3UltimasFilas sudoku 6 "Forma las 3 ultimas filas del sudoku.")
(check-match (construirCuadrante 5 sudoku) '(0 5 2 0 1 0 7 4 0))
(check-match (firstZero sudoku) '(0 1))
(check-eq? (numeroValido? 3 '(0 1) sudoku) #t "Dice si el numero pasado puede ir en la posicion indicada.")
(check-match (reemplazarElementoLista 3 1 (car sudoku)) '(5 3 0 0 0 0 0 0 0))
(check-match (reemplazarCero 3 '(0 1) sudoku) '((5 3 0 0 0 0 0 0 0)(0 2 8 4 0 0 5 0 3)(1 0 0 2 7 0 0 0 6)(0 0 3 0 5 2 1 9 0)(7 0 6 0 1 0 2 0 8)(0 1 9 7 4 0 3 0 0)(6 0 0 0 9 4 0 0 2)(8 0 1 0 0 6 7 5 0)(0 0 0 0 0 0 0 0 4)))
(check-match (push 1 '()) '(1))
(check-match (pop '(1)) 1)
(check-match (encolar 2 '(1 2)) '(2 1 2))
(check-match (obtenerPrimeroCola '(1 2)) 2)
(check-match (desencolar '(1 2 3)) '(1 2))
(check-match (getOperacionesValidas 9 '(0 1) sudoku '()) '(3 4 6 7 9))
(check-match (apilarSucesores '(9) '(0 1) sudoku '()) '(((5 9 0 0 0 0 0 0 0)
    (0 2 8 4 0 0 5 0 3)
    (1 0 0 2 7 0 0 0 6)
    (0 0 3 0 5 2 1 9 0)
    (7 0 6 0 1 0 2 0 8)
    (0 1 9 7 4 0 3 0 0)
    (6 0 0 0 9 4 0 0 2)
    (8 0 1 0 0 6 7 5 0)
    (0 0 0 0 0 0 0 0 4))))
(check-match (encolarSucesores '(9) '(0 1) sudoku '()) '(((5 9 0 0 0 0 0 0 0)
    (0 2 8 4 0 0 5 0 3)
    (1 0 0 2 7 0 0 0 6)
    (0 0 3 0 5 2 1 9 0)
    (7 0 6 0 1 0 2 0 8)
    (0 1 9 7 4 0 3 0 0)
    (6 0 0 0 9 4 0 0 2)
    (8 0 1 0 0 6 7 5 0)
    (0 0 0 0 0 0 0 0 4))))
(check-eq? (goalTest sudoku) #f "Comprueba que el sudoku esta o no acabado.")

